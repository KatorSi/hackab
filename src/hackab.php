<?hh

	class Hackab {
	public function ab(string $_dir): string {
		$filename_autoloader = 'hackab_autoloader.php'; 
		$header_autoloader = <<<EOL
<?hh
	// @codingStandardsIgnoreFile
	// @codeCoverageIgnoreStart
	// this is an autogenerated file - do not edit
	spl_autoload_register(
    	function($class) {
        	static $classes = null;
        	if ($classes === null) {
            	$classes = array(
EOL;
		$footer_autoloader = <<<EOL
 );
        }
        $cn = strtolower($class);
        if (isset($classes[$cn])) {
            require __DIR__ . $classes[$cn];
        }
    }
);
// @codeCoverageIgnoreEnd
EOL;
		$dir = $_dir;
		$map = Map{};
		$namespace = "";
		//put header_autoloader.php into $result_str 
		$result_str .= $header_autoloader;
		//iterator filesystem
		$iterator = new FileSystemIterator($dir);
		foreach ($iterator as $fileinfo) {
			$file = $fileinfo->getFileName(); 
			$handle = fopen($file, "r+");
			while(($file_string = fgets($handle)) !== false) {
				$sub_string_namespace = strstr($filestring, "namespace");
				//looking namespace
				if(!empty($sub_string_namespace)) {
					$sub_string_namespace = trim(substr($sub_string_namespace, 9));
					$sub_string_namespace = trim($sub_string_namespace, ";");
					$namespace = '\''.$sub_string_namespace.'\\';
					continue();
				}
				$sub_string_classname = strstr($filestring, "class");
				//looking classname
				if(!empty($sub_string_classname)) {
					$sub_string_classname = trim(substr(strstr($sub_string_classname, "{", true) , 5));
					$sub_string_classname = trim(strstr($sub_string_classname, " "));
					$map[$sub_string_classname] = $file;
					//put namespace and classname into hackab_autoloader.php
					$content = $namespace.$sub_string_classname.'\''.'=>'.'\'/'.$file.'.php\',';
					$result_str .= $content;
				}
			}
		}
		//put footer_autoloader.php into hackab_autoloader.php
		$result_str .= $footer_autoloader;
		file_put_contents($filename_autoloader, $result_str);
	}
}