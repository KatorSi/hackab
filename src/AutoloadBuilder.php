<?hh


	class AutoloadBuilder {

	const NS = 'namespace';
	const CN = 'class';

	public $map = Map{};

	public function scanning($dir, $include_pattern, $exclude_pattern) {
		$namespace_length = strlen($this::NS);
		$class_length = strlen($this::CN);
		$include_files = glob($dir."/".$include_pattern);
		$exclude_files = glob($dir."/".$exclude_pattern);
		$iterator = new FileSystemIterator($dir);
		foreach ($iterator as $fileinfo) {
			$namespace = "";
			$file = $fileinfo->getFileName();
			$path = $dir."/".$file;
			if($fileinfo->isDir() && ($file != "." && $file != "..")) {
				$this->scanning($path, $include_pattern, $exclude_pattern);
			}
			else {
				if(in_array($path, $include_files) && !in_array($path, $exclude_files)) {
					$spl_file = new SplFileObject($path);
					while(!$spl_file->eof()) {
						$file_string = $spl_file->fgets();
						$pos_namespace = strpos(trim($file_string), $this::NS);
						$sub_string_namespace = strstr($file_string, $this::NS);
						if(!empty($sub_string_namespace) && $pos_namespace === 0) {
							$sub_string_namespace = trim(substr($sub_string_namespace, $namespace_length));
							$sub_string_namespace = trim($sub_string_namespace, ";");
							$namespace = $sub_string_namespace."\\\\";
							continue;
						}
						$pos_class = strpos(trim($file_string), $this::CN);
						$sub_string_classname = strstr($file_string, $this::CN);
						if(!empty($sub_string_classname) && $pos_class === 0) {
							$replace = array("{", "}");
							$sub_string_classname = trim(substr(str_replace($replace, "", $sub_string_classname) , $class_length));
							$sub_string_classname = explode(" ", $sub_string_classname, 2);
							$this->map[$namespace.$sub_string_classname[0]] = $path;
						}
					}
				}
			}
		}
	}

	function __construct() {

		$filename_autoloader = NULL;
		$include_pattern = "*.php";
		$exclude_pattern = "";

		$header_autoloader = <<<'EOL'
<?hh
	// @codingStandardsIgnoreFile
	// @codeCoverageIgnoreStart
	// this is an autogenerated file - do not edit
	spl_autoload_register(
    	function($class) {
        	static $classes = null;
        	if ($classes === null) {
            	$classes = array(
EOL;

		$footer_autoloader = <<<'EOD'
 );
        }
        $cn = strtolower($class);
        if (isset($classes[$cn])) {
            require __DIR__ . $classes[$cn];
        }
    }
);
// @codeCoverageIgnoreEnd
EOD;
		global $argv;
		$content = "";
		$result_str = "";
		$result_str .= $header_autoloader;
		$parameters = array(
			'i::' => 'include::',
			'e::'  => 'exclude::',
			'o::' => 'output::'
		);
		$options = getopt(implode('', array_keys($parameters)), $parameters);
		$pruneargv = array();
		foreach ($options as $option => $value) {
			switch ($option) {
				case 'i':
				case 'include':
					$include_pattern = $value;
					break;
				case 'e':
				case 'exclude_pattern':
					$exclude_pattern = $value;
					break;
				case 'o':
				case 'output':
					$filename_autoloader = $value;
					break;
				default:
					echo "Unknown option: $option\n";
					break;
			}
		}
		foreach ($options as $option => $value) {
  			foreach ($argv as $key => $chunk) {
    			$regex = '/^'. (isset($option[1]) ? '--' : '-') . $option . '/';
    			if ($chunk == $value && $argv[$key-1][0] == '-' || preg_match($regex, $chunk)) {
      				array_push($pruneargv, $key);
    			}
  			}
		}
		while ($key = array_pop($pruneargv)) { 
			unset($argv[$key]);
		}
		foreach($argv as $num => $val) {
			if($num == 0) {
				continue;
			}
			$this->scanning($val, $include_pattern, $exclude_pattern);
		}
		$content = join(',', array_map(function($className, $fileName) {
			return "\n\t\t\t'".strtolower($className)."'=>'/".strtolower($fileName)."'";
		}, array_keys($this->map), array_values($this->map)));
		$result_str .= $content;
		$result_str .= "\n".$footer_autoloader;
		if(!is_null($filename_autoloader)) {
			file_put_contents($filename_autoloader, $result_str);
		}
		else {
			echo "$result_str\n";
		}
	}
}